import { error, json } from '@sveltejs/kit';
import { env } from '$env/dynamic/private';
import type { RequestHandler } from './$types';
import { HumanMessage, SystemMessage } from '@langchain/core/messages';
import type { CourseStructureGenerationResponse } from '$lib/types/course';
import {
	CourseStructureGenerationRequestSchema,
	formatZodError,
	type CourseStructureGenerationRequest
} from '$lib/validation/api-schemas.js';
import { createChatClient, withWebSearch } from '$lib/generation/ai/client-factory.js';
import { extractTextContent, parseCourseStructureResponse } from '$lib/generation/ai/response-parser.js';

/**
 * API endpoint for generating course structure with AI-enhanced module details
 * Takes high-level course parameters and module skeleton, returns detailed structure
 */

export const POST: RequestHandler = async ({ request }) => {
	const apiKey = env.ANTHROPIC_API_KEY;
	if (!apiKey) {
		throw error(500, {
			message: 'ANTHROPIC_API_KEY not configured'
		});
	}

	try {
		// Parse and validate incoming request with Zod
		const rawBody = await request.json();
		const validation = CourseStructureGenerationRequestSchema.safeParse(rawBody);

		if (!validation.success) {
			throw error(400, {
				message: 'Invalid request data: ' + formatZodError(validation.error).join(', ')
			});
		}

		const body = validation.data;

		// Build prompt for course structure generation
		const prompt = buildCourseStructurePrompt(body);

		// Initialize client
		let model = createChatClient({ apiKey });

		// Add web search if enabled
		if (body.enableResearch) {
			console.log('Enabling web research with trusted domains...');
			model = withWebSearch(model);
		}

		const messages = [
			new SystemMessage('You are an expert curriculum designer specializing in peer-led technical education.'),
			new HumanMessage(prompt)
		];

		console.log('Generating course structure...');
		const response = await model.invoke(messages);

		// Extract text content from response
		const responseText = extractTextContent(response.content);

		console.log('Course structure generated, parsing response...');

		// Extract structured data from response
		const result = parseCourseStructureResponse(responseText);

		return json(result);

	} catch (err) {
		console.error('Course structure generation error:', err);

		if (err && typeof err === 'object' && 'status' in err) {
			throw err;
		}

		throw error(500, {
			message: err instanceof Error ? err.message : 'Failed to generate course structure'
		});
	}
};

function buildCourseStructurePrompt(data: CourseStructureGenerationRequest): string {
	const supportingDocs = data.supportingDocuments && data.supportingDocuments.length > 0
		? `\n\n<SupportingDocuments>\n${data.supportingDocuments.join('\n\n')}\n</SupportingDocuments>`
		: '';

	const researchInstructions = data.enableResearch
		? `\n<ResearchInstructions>
      You have access to web search to find current, relevant information about:
      - Latest best practices and trends for the technologies and topics in this course
      - Current industry standards and tooling
      - Recent developments in AI and software development
      - Real-world examples and case studies

      Use web search to ensure the course structure is up-to-date and reflects current industry practice.
      Focus on reputable sources: vendor documentation, established tech publications, and academic sources.
      </ResearchInstructions>`
    : '';

 	// Build arc structure description
 	let arcStructureSection = '';
 	if (data.arcs && data.arcs.length > 0) {
  		arcStructureSection = `\n<ArcStructure>\nThe course is organized into ${data.arcs.length} thematic arcs:\n\n`;
  		data.arcs.forEach(arc => {
   			arcStructureSection += `Arc ${arc.order}: "${arc.title}" (${arc.durationWeeks} weeks)\n`;
   			arcStructureSection += `Theme: ${arc.theme}\n`;
   			arcStructureSection += `Description: ${arc.description}\n`;

   			if (arc.modules && arc.modules.length > 0) {
    				arcStructureSection += `Modules within this arc:\n`;
    				arc.modules.forEach(module => {
     					arcStructureSection += `  - Module ${module.order}: "${module.title}" (${module.durationWeeks} weeks)\n`;
              if (module.description) {
                arcStructureSection += `    ${module.description}\n`
              };
    				});
   			} else {
    				arcStructureSection += `(Modules to be auto-generated by AI)\n`;
   			}

   			arcStructureSection += `\n`;
  		});
  		arcStructureSection += `</ArcStructure>`;
 	}

 	return `<Task>
    You are designing a course structure for a ${data.structure} ${data.totalWeeks}-week course organized into thematic ARCS.

    <CourseDetails>
    <Title>${data.title}</Title>
    <Description>${data.description}</Description>
    <Duration>${data.totalWeeks} weeks, ${data.daysPerWeek} day(s) per week</Duration>
    <CohortSize>${data.cohortSize} learners</CohortSize>
    <Structure>${data.structure}</Structure>
    <LearnerExperience>
      - Related field experience: ${data.learnerExperience.prereq}
      - Course focus experience: ${data.learnerExperience.focus}
    </LearnerExperience>
    </CourseDetails>
    ${supportingDocs}
    ${arcStructureSection}
    ${researchInstructions}

    <Instructions>
    The course is organized using ARCS - thematic learning phases that group related modules.

    1. Generate a cohesive course narrative that explains the overall learning journey across all arcs
    ${data.enableResearch ? '   - Use web search to validate that the course approach reflects current industry practice' : ''}

    2. For EACH ARC:
      - Generate an arcThemeNarrative explaining the thematic focus and what learners will explore
      - Generate an arcProgressionNarrative explaining how modules within THIS arc build on each other
      - If modules are provided, enhance them with detailed objectives and topics
      - If modules are NOT provided, intelligently break down the arc into 2-4 modules based on arc duration and theme
    ${data.enableResearch ? '   - Use web search to ensure topics and technologies are current' : ''}

    3. For EACH MODULE (whether provided or generated):
      - Refined title (improve if needed, keep if good)
      - Rich description of what learners will focus on
      - 3-5 specific, measurable learning objectives
      - 4-6 key topics that will be covered
    ${data.enableResearch ? '   - Use web search to validate learning objectives match current industry needs' : ''}

    4. Ensure:
      - Modules within each arc build on each other progressively
      - Arcs are thematically independent but temporally sequenced
      - Content complexity matches learners' experience levels
      - The ${data.structure} teaching structure is reflected in recommendations
    ${data.enableResearch ? '   - All content reflects current best practices discovered through research' : ''}

    Format your response as a JSON object with this structure:
    {
      "courseNarrative": "2-3 paragraph narrative describing the overall course journey and how arcs connect thematically",
      "arcs": [
        {
          "order": 1,
          "title": "Arc title",
          "description": "Arc description",
          "theme": "Thematic focus",
          "arcThemeNarrative": "2-3 sentences explaining this arc's thematic focus",
          "arcProgressionNarrative": "2-3 sentences explaining how modules in this arc connect",
          "suggestedDurationWeeks": number,
          "modules": [
            {
              "order": 1,
              "title": "Module title",
              "description": "2-3 sentence description",
              "suggestedDurationWeeks": number,
              "learningObjectives": ["objective 1", "objective 2", ...],
              "keyTopics": ["topic 1", "topic 2", ...]
            }
          ]
        }
      ],
      "progressionNarrative": "1-2 paragraphs explaining how arcs connect across the course (note: arcs are thematically independent but sequenced)"
    }

    Think carefully about creating logical thematic arcs with meaningful internal progression that take learners from their current level to meaningful competence.
    </Instructions>
  </Task>`;
}

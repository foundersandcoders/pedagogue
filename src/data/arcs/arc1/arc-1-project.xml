<projects>
    <projects-process>
        <projects-process-essential>
            Groups choose one of the available briefs and then work on it for this arc
        </projects-process-essential>

        <projects-process-encouraged>
            Groups are randomly assisnged one of the available twists. They should attempt to meet the brief by using the twist as inspiration for its purpose or approach.
        </projects-process-encouraged>
    </projects-process>

    <projects-briefs>
        <projects-briefs-1>
            <projects-briefs-1-overview>
                - Name: AI Dev Companion
      		- Task: Build a personal AI-assisted development tool that helps with coding tasks.
      		- Focus: Using large-language-model (LLM) APIs for developer productivity (e.g. code generation, explanation)
            </projects-briefs-1-overview>

            <projects-briefs-1-brief>
      		Create a personal AI-powered coding assistant that helps developers with one or two common programming tasks. This could be a command-line tool, a chat interface, or an editor plugin.
            </projects-briefs-1-brief>

            <projects-briefs-1-examples>
      		Participants are encouraged to implement minimal but functional versions of these ideas – the goal is not to build a production-ready tool, but to demonstrate the concept. For instance, the “unit test writer” might only handle one simple function at a time, and that’s okay.

      		1. AI Chatbot for Coding Questions: A terminal-based chatbot where you can paste a snippet of code or an error message. The AI explains it or suggests a fix.
               	2. Smart Snippet Generator: takes a plain English request (e.g. “I need a function to parse CSV files in Node”) & returns a code snippet fulfilling that request. This could run as a CLI command or even a simple web form.
               	3.	Code Commenter: injects comments/documentation into your code. You feed it a source file and it uses an AI to generate docstring comments for each function.
               	4.	Unit Test Writer: A script that, given a function’s code, uses AI to draft basic unit tests for it.
            </projects-briefs-1-examples>

            <projects-briefs-1-notes>
            </projects-briefs-1-notes>
        <projects-briefs-1>

        <projects-briefs-2>
            <projects-briefs-2-overview>
                - Name: GitHub AI Helper
                - Task: Create an AI-driven GitHub Action to automate a development workflow
                - Focus: Integration of AI into existing developer tools and workflows
            </projects-briefs-2-overview>

            <projects-briefs-2-brief>
                Build an AI-powered GitHub Action (or similar CI pipeline tool) that improves some aspect of the development workflow automatically. It should run in response to repository events (pull requests, issues, pushes) and perform a useful task. The project is open-ended as long as it runs as an automated workflow (on GitHub or a comparable platform) and involves AI generating output or decisions.
            </projects-briefs-2-brief>

            <projects-briefs-2-examples>
                1. commenting on pull requests with a code review generated by an LLM
                2. labeling new issues with predicted categories
                3. writing a first draft of release notes or a changelog when a release is created
                4. updating documentation based on comments in code

                1. AI Code Reviewer: A GitHub Action that triggers on pull request creation. It fetches the diff or changed files and uses an AI to comment on potential bugs, style issues, or missing tests. (This is akin to an AI assistant for code review.)
    			2. Issue Triage Bot: An action that runs when new issues are submitted. It reads the issue text and uses an AI to determine labels (bug/feature/question) and perhaps suggests an assignee or relevant team based on the content. It could comment with a summary or a friendly response as well.
    			3. Release Notes Generator: When a new release/tag is pushed, this action compiles commit messages or PR titles since the last release and prompts an AI to draft human-readable release notes. The team would then only need to tweak the notes rather than writing from scratch.
    			4. Documentation Updater: An action that scans commit diffs for changes to code that lack corresponding docs, and opens a PR with suggested documentation changes generated by AI. (This one is more challenging, but a simplified version could focus just on detecting function docstrings that are missing and generating some.)
            </projects-briefs-2-examples>

            <projects-briefs-2-notes>
            </projects-briefs-2-notes>
        <projects-briefs-2>
    </projects-briefs>

    <projects-twists>
        <projects-twists-1>
            Name: The Helpful Saboteur
            Task: Build a developer tool that deliberately introduces productive chaos

            - Example 1: CLI that suggests radical refactorings
            - Example 2: git hook that plays devil's advocate on commits
        </projects-twists-1>

        <projects-twists-2>
            Name: The Unreliable Narrator
    		Task: Create an AI system that generates multiple perspectives on the same data.

    		- Example 1: documentation generator that writes for different audiences
    		- Example 2: data visualisation tool that presents competing interpretations
        </projects-twists-2>
    </projects-twists>
</projects>

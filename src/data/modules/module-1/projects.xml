<Projects>
  <Process>
    <Essential>Groups choose one of the available briefs and then work on it for this arc</Essential>
    <Encouraged>
      - Groups are randomly assigned one of the available twists.
      - They should attempt to:
        - meet the brief
        - by using the twist as inspiration
    </Encouraged>
  </Process>

  <ProjectBriefs>
    <ProjectBrief>
      <Overview>
        <Name>AI Dev Companion</Name>

        <Task>
          Build a personal AI-assisted development tool that helps with coding tasks.
        </Task>

        <Focus>
          Using large-language-model (LLM) APIs for developer productivity (e.g. code generation, explanation)
        </Focus>
      </Overview>

      <Criteria>
        - Create a personal AI-powered coding assistant that helps developers with one or two common programming tasks.
        - This could be a command-line tool, a chat interface, or an editor plugin.
        - Participants are encouraged to implement minimal but functional versions of these ideas â€“ the goal is not to build a production-ready tool, but to demonstrate the concept.
        - For instance, the "unit test writer" might only handle one simple function at a time, and that's okay.
      </Criteria>

      <Skills>
        <Skill>
         	<Name>LLM API Integration</Name>

          <Details>
            - Learn how to call OpenAI, Anthropic, or Google APIs for code generation and explanation.
            - Understand API authentication, request/response formats, and rate limiting.
            - Handle errors and edge cases gracefully.
          </Details>
        </Skill>

        <Skill>
         	<Name>Prompt Engineering for Code Tasks</Name>

          <Details>
            - Design effective prompts to get quality code outputs.
            - Learn the difference between user prompts and system prompts.
            - Understand how to get code vs explanations based on prompt structure.
          </Details>
        </Skill>

        <Skill>
         	<Name>Developer Tool Design</Name>

          <Details>
            - Consider user experience for command-line tools, chat interfaces, or editor plugins.
            - Think about how developers will interact with the tool in their workflow.
            - Design for minimal friction and maximum utility.
          </Details>
        </Skill>
      </Skills>

      <Examples>
        <Example>
          <Name>AI Chatbot for Coding Questions</Name>

          <Description>
            - A terminal-based chatbot where you can paste a snippet of code or an error message.
            - The AI explains it or suggests a fix.
          </Description>
        </Example>

        <Example>
          <Name>Smart Snippet Generator</Name>

          <Description>
            - Takes a plain English request (e.g. "I need a function to parse CSV files in Node") and returns a code snippet fulfilling that request.
            - This could run as a CLI command or even a simple web form.
          </Description>
        </Example>

        <Example>
          <Name>Code Commenter</Name>

          <Description>
            - Injects comments/documentation into your code.
            - You feed it a source file and it uses an AI to generate docstring comments for each function.
          </Description>
        </Example>

        <Example>
          <Name>Unit Test Writer</Name>

          <Description>
            - A script that, given a function's code, uses AI to draft basic unit tests for it.
          </Description>
        </Example>
      </Examples>

      <Notes>
      </Notes>
    </ProjectBrief>

    <ProjectBrief>
      <Overview>
        <Name>GitHub AI Helper</Name>

        <Task>
          Create an AI-driven GitHub Action to automate a development workflow
        </Task>

        <Focus>
          Integration of AI into existing developer tools and workflows
        </Focus>
      </Overview>

      <Criteria>
        - Build an AI-powered GitHub Action (or similar CI pipeline tool) that improves some aspect of the development workflow automatically.
        - It should run in response to repository events (pull requests, issues, pushes) and perform a useful task.
        - The project is open-ended as long as it runs as an automated workflow (on GitHub or a comparable platform) and involves AI generating output or decisions.
      </Criteria>

      <Skills>
        <Skill>
          <Name>CI/CD Integration</Name>

          <Details>
            - Learn how GitHub Actions (or similar CI services) can run custom code.
            - Understand how to write a workflow that triggers on events (like pull_request opened) and calls a script.
            - Explore existing Action templates for calling APIs and posting comments.
          </Details>
        </Skill>

        <Skill>
          <Name>Automated Code Analysis</Name>

          <Details>
            - Use AI to analyze code diffs, commit messages, or issue text.
            - Extract meaningful insights and generate useful feedback.
            - Handle the context limitations of sending code to external APIs.
          </Details>
        </Skill>

        <Skill>
          <Name>Security and Privacy Considerations</Name>

          <Details>
            - Discuss the implications of sending code to external APIs (like OpenAI) during CI.
            - Understand what OpenAI/Anthropic's terms say about data usage.
            - Consider safer alternatives and best practices.
          </Details>
        </Skill>
      </Skills>

      <Examples>
        <Example>
          <Name>AI Code Reviewer</Name>

          <Description>
            - A GitHub Action that triggers on pull request creation.
            - It fetches the diff or changed files and uses an AI to comment on potential bugs, style issues, or missing tests.
            - This is akin to an AI assistant for code review.
          </Description>
        </Example>

        <Example>
          <Name>Issue Triage Bot</Name>

          <Description>
            - An action that runs when new issues are submitted.
            - It reads the issue text and uses an AI to determine labels (bug/feature/question) and perhaps suggests an assignee or relevant team based on the content.
            - It could comment with a summary or a friendly response as well.
          </Description>
        </Example>

        <Example>
          <Name>Release Notes Generator</Name>

          <Description>
            - When a new release/tag is pushed, this action compiles commit messages or PR titles since the last release and prompts an AI to draft human-readable release notes.
            - The team would then only need to tweak the notes rather than writing from scratch.
          </Description>
        </Example>

        <Example>
          <Name>Documentation Updater</Name>

          <Description>
            - An action that scans commit diffs for changes to code that lack corresponding docs, and opens a PR with suggested documentation changes generated by AI.
            - A simplified version could focus just on detecting function docstrings that are missing and generating some.
          </Description>
        </Example>
      </Examples>

      <Notes>
      </Notes>
    </ProjectBrief>
  </ProjectBriefs>

  <ProjectTwists>
    <ProjectTwist>
      <Name>The Helpful Saboteur</Name>

      <Task>
        Build a developer tool that deliberately introduces productive chaos
      </Task>

      <ExampleUses>
        <Example>
          CLI that suggests radical refactorings
        </Example>

        <Example>
          git hook that plays devil's advocate on commits
        </Example>
      </ExampleUses>
    </ProjectTwist>

    <ProjectTwist>
      <Name>The Unreliable Narrator</Name>

      <Task>
        Create an AI system that generates multiple perspectives on the same data
      </Task>

      <ExampleUses>
        <Example>
          documentation generator that writes for different audiences
        </Example>

        <Example>
          data visualisation tool that presents competing interpretations
        </Example>
      </ExampleUses>
    </ProjectTwist>
  </ProjectTwists>
</Projects>

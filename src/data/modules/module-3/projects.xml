<Projects process_count="3" briefs_count="2" twists_count="0">
  <ProcessNotes count="3">
    <Note order="1" essential="true">Groups choose one of the available briefs and then work on it for this arc</Note>
    <Note order="2" essential="false">Groups are randomly assigned one of the available twists.</Note>
    <Note order="3" essential="false">They should attempt to meet the brief by using the twist as inspiration</Note>
  </ProcessNotes>
  <ProjectBriefs count="2">
    <ProjectBrief order="1" name="RAG Knowledge Chatbot" skills_count="4" examples_count="4" notes_count="3">
      <Task>Build a chatbot that provides reliable answers based on a provided knowledge base (company docs, FAQs, or any domain data) using Retrieval-Augmented Generation.</Task>
      <Focus>Implementing embeddings and vector search to ground LLM outputs in facts. Participants learn to build a pipeline where user queries trigger document retrieval followed by an LLM response that cites the retrieved info (mitigating hallucinations).</Focus>
      <Criteria>
        - Build a chatbot that can answer user queries based on a specific knowledge base or dataset provided, using Retrieval-Augmented Generation (RAG) techniques.
        - The chatbot should deliver answers with references to the source material, ensuring accuracy.
        - The knowledge base could be a collection of documents, a wiki, a product FAQ, or any corpus that isn't part of the AI's training data.
        - The key is that the bot must fetch relevant information from the provided data and use it to formulate its answers, rather than relying purely on the LLM's internal knowledge.
      </Criteria>
      <Skills count="4">
        <Skill order="1" name="Implementing a retrieval pipeline">
          - Create an end-to-end system where a user's query is first processed to retrieve relevant documents (or snippets) from the knowledge base.
          - Feed those documents into the LLM to generate a context-aware answer.
          - Typical steps: indexing the docs, searching them, and constructing a prompt with the results.
        </Skill>
        <Skill order="2" name="Using vector databases or embeddings">
          - To retrieve by meaning, use embeddings to represent documents and queries.
          - Set up a vector store (for example, using an open-source solution like Chroma or a free tier of Pinecone or Weaviate).
          - Gain hands-on experience with creating embeddings for text and performing similarity search.
          - Understand how vector search works as a key technical skill.
        </Skill>
        <Skill order="3" name="Preventing hallucinations and ensuring citations">
          - Have the bot cite sources (e.g. "According to Document X, …") to enforce a degree of reliability.
          - Learn prompt strategies to have the LLM include excerpts or references from the retrieved text.
          - Foster good practices in AI transparency – not just answer, but show evidence.
          - Understand the difference between an answer coming from ground truth vs the model's own guess.
        </Skill>
        <Skill order="4" name="Scaling and optimization considerations">
          - With possibly dozens or hundreds of pages of content, efficiency matters.
          - Figure out how to index data (maybe chunk documents into sections, which chunk size works best).
          - Determine how many results to feed into the prompt without busting token limits.
          - Experiment with trade-offs: feeding fewer, highly relevant chunks vs. more chunks.
          - Introduction to performance tuning in AI systems.
        </Skill>
      </Skills>
      <Examples count="4">
        <Example order="1" name="Internal Company Docs Assistant">
          - Use internal HR policies manual or company FAQs.
          - The bot would answer things like "How do I file an expense report?" by retrieving the relevant policy.
        </Example>
        <Example order="2" name="Tech Library Assistant">
          - A bot trained on a collection of programming tutorials or documentation (say, a subset of MDN web docs or Python library docs).
          - Users can ask programming questions and get answers with references to the docs.
        </Example>
        <Example order="3" name="Educational Tutor">
          - Use a collection of course notes or textbook chapters on a subject (like physics).
          - The bot answers questions and cites the source material.
        </Example>
        <Example order="4" name="Legal/Compliance Assistant">
          - A repository of laws or regulations, where the bot helps answer, e.g., "What's the law about X in region Y?" with citation.
          - Shows a use-case in legal AI with the critical need for source references due to high accuracy requirements.
        </Example>
      </Examples>
      <Notes count="3">
        <Note order="1">This project solidifies working with external data and introduces basic data stores (could use a local vector DB like Chroma or a cloud service if budget permits).</Note>
        <Note order="2">By the demo, each team's chatbot should be able to take a natural language question and return an answer with a cited source from their data. Any failure cases (like the bot giving an answer with wrong reference) are teachable moments.</Note>
        <Note order="3">This project highlights the importance of data in AI applications – an AI is only as good as the data you give it.</Note>
      </Notes>
    </ProjectBrief>
    <ProjectBrief order="2" name="Multi-Agent Collaboration System" skills_count="3" examples_count="3" notes_count="0">
      <Task>Build systems where multiple AI agents collaborate on complex tasks.</Task>
      <Focus>Advanced multi-agent frameworks, agent communication protocols, task decomposition strategies, and emergent behaviors in agent collectives.</Focus>
      <Criteria>
        - Design and implement a system where multiple AI agents work together to solve complex problems.
        - Each agent should have a specialized role or capability.
        - Agents should be able to communicate and coordinate their efforts.
        - The system should demonstrate how distributed AI problem-solving can tackle tasks that would be difficult for a single agent.
      </Criteria>
      <Skills count="3">
        <Skill order="1" name="Multi-agent architecture design">
          - Learn how to design systems where multiple agents with different specializations work together.
          - Understand agent roles, responsibilities, and communication patterns.
          - Design protocols for agent coordination and task delegation.
        </Skill>
        <Skill order="2" name="Agent orchestration and coordination">
          - Implement mechanisms for agents to communicate and share information.
          - Handle task decomposition and distribution among agents.
          - Manage consensus and decision-making in multi-agent systems.
        </Skill>
        <Skill order="3" name="Emergent intelligence patterns">
          - Observe how collective intelligence emerges from agent interactions.
          - Understand how agents can debate and refine solutions through argument.
          - Learn to recognize and leverage emergent behaviors in distributed systems.
        </Skill>
      </Skills>
      <Examples count="3">
        <Example order="1" name="Distributed code migration tool">
          - Multiple agents analyze different parts of a codebase.
          - Agents coordinate to plan and execute a complex migration or refactoring.
        </Example>
        <Example order="2" name="Multi-agent testing framework">
          - Specialized agents that find edge cases through argument and debate.
          - One agent proposes test cases, another challenges them, a third synthesizes the best cases.
        </Example>
        <Example order="3" name="Design system generator">
          - Specialist agents debate implementation details.
          - One focuses on accessibility, another on performance, another on aesthetics.
          - They negotiate and converge on optimal design decisions.
        </Example>
      </Examples>
      <Notes count="0">
      </Notes>
    </ProjectBrief>
  </ProjectBriefs>
  <ProjectTwists count="0">
  </ProjectTwists>
</Projects>
